version: 0.2

cache:
  paths:
    - /root/terraform_cache/**/*
    - /root/.ansible_cache/**/*

phases:
  install:
    runtime-versions:
      python: 3.8
    commands:
      - echo Installing Terraform and Ansible with cache...
      - mkdir -p /root/terraform_cache /root/.ansible_cache
      - if [ ! -f /root/terraform_cache/terraform ]; then
          echo "Terraform not in cache. Downloading..." &&
          wget https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip &&
          unzip terraform_1.5.7_linux_amd64.zip -d /root/terraform_cache &&
          chmod +x /root/terraform_cache/terraform;
        else
          echo "Terraform found in cache.";
        fi
      - export PATH=$PATH:/root/terraform_cache
      - terraform --version
      - if ! ansible --version > /dev/null 2>&1; then
          echo "Installing Ansible..." &&
          yum install -y unzip wget ansible;
        else
          echo "Ansible already installed.";
        fi
      - ansible --version

  pre_build:
    commands:
      - echo "Downloading dynamic tfvars from S3..."
      - aws s3 cp s3://splunk-deployment-test/$TFVARS_S3_KEY terraform.tfvars
      - echo "Pre-build phase complete."

  build:
    commands:
      - terraform init
      - chmod +x scripts/check_key.sh
      - terraform apply -auto-approve
      - echo "Waiting for EC2 SSH to be ready..."
      - echo "Running Ansible Playbook..."
      - ansible-playbook -i inventory.ini botsv3-setup.yml --ssh-common-args='-o StrictHostKeyChecking=no'

  post_build:
    commands:
      - echo "EC2 Splunk + Ansible Deployment Completed Successfully!"